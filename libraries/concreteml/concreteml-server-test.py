from fastapi import FastAPI, HTTPException, Request, Response, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import os
import base64
import httpx
from tempfile import TemporaryDirectory
from shutil import unpack_archive
from pathlib import Path
from concrete.ml.deployment import FHEModelClient, FHEModelDev, FHEModelServer
import asyncio
import nest_asyncio
import json

nest_asyncio.apply()

app = FastAPI()
security = HTTPBearer()

CONTAINER_ID = os.getenv("CONTAINER_ID")
MODEL_ID = os.getenv("MODEL_ID")
SERVER_PORT = 80  # Default port for HTTP
AUTH_SERVER_URL = os.getenv("AUTH_SERVER_URL")
CLIENTZIP_BASE64 =""
SERVERZIP_BASE64 = ""


async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    apikey = credentials.credentials
    headers = {"Authorization": f"Bearer {apikey}"}
    body = {"model_id": MODEL_ID, "container_id": CONTAINER_ID}
    async with httpx.AsyncClient() as client:
        response = await client.post(AUTH_SERVER_URL, headers=headers, json=body)
        if response.status_code != 200:
            raise HTTPException(status_code=401, detail="Invalid token")
        data = response.json()
        if not data.get("result"):
            raise HTTPException(status_code=401, detail="Authentication failed")
        return True


def save_base64_and_json_to_zip(client_base64, json_str, zip_path):
    with TemporaryDirectory() as tempdir:
        client_specs_path = os.path.join(tempdir, "client.specs.json")
        with open(client_specs_path, "w") as json_file:
            json.dump(json.loads(json_str), json_file)

        client_zip_path = os.path.join(tempdir, "client.zip")
        decode_and_save_base64(client_base64, client_zip_path)

        with zipfile.ZipFile(zip_path, "w") as zipf:
            zipf.write(client_specs_path, "client.specs.json")
            zipf.write(client_zip_path, "client.zip")


def save_base64_to_zip(base64_str, zip_path):
    with open(zip_path, "wb") as f:
        f.write(base64.b64decode(base64_str))


def save_base64_zip(encoded_str, output_dir, output_filename):
    # Ensure the output directory exists
    output_dir_path = Path(output_dir)
    output_dir_path.mkdir(parents=True, exist_ok=True)

    # Decode the base64 encoded string
    zip_bytes = base64.b64decode(encoded_str)

    # Define the output file path
    zip_path = output_dir_path / output_filename

    # Write the bytes to the zip file
    with open(zip_path, "wb") as zip_file:
        zip_file.write(zip_bytes)

    # Return the path to the saved zip file
    return str(zip_path)


@app.get("/test")
async def test():
    print("success")
    return Response("hello world!")


@app.get("/init")
async def get_client():
    client_zip_base64 = CLIENTZIP_BASE64
    client_zip_bytes = base64.b64decode(client_zip_base64)
    return Response(content=client_zip_bytes, media_type="application/zip")


# 이건 클라이언트에서만 실행하는것. 테스트용으로 실행함
@app.get("/make")
async def get_evaluation_key():
    # Let's create the client and load the model
    output_dir = "/home/jovyan/output"

    save_base64_zip(CLIENTZIP_BASE64, output_dir, "client.zip")
    save_base64_zip(SERVERZIP_BASE64, output_dir, "server.zip")

    fhemodel_client = FHEModelClient(output_dir, key_dir=output_dir)
    # The client first need to create the private and evaluation keys.
    serialized_evaluation_keys = fhemodel_client.get_serialized_evaluation_keys()
    #print(serialized_evaluation_keys)
    return Response("ev made")


@app.get("/predict")
async def predict():
    body = await request.json()
    evaluation_key = body.get("evaluation_key")
    encrypted_data = body.get("encrypted_data")

    server_zip_base64 = SERVERZIP_BASE64
    server_zip_bytes = base64.b64decode(server_zip_base64)
    with TemporaryDirectory() as tmpdirname:
        server_zip_path = Path(tmpdirname) / "server.zip"
        with open(server_zip_path, "wb") as f:
            f.write(server_zip_bytes)

        unpack_archive(server_zip_path, tmpdirname, "zip")
        fhe_model_server = FHEModelServer(tmpdirname)

        encrypted_prediction = fhe_model_server.run(encrypted_data, evaluation_key)

        return {"encrypted_prediction": base64.b64encode(encrypted_prediction).decode()}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=SERVER_PORT)